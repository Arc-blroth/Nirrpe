// Nirrpe's language grammar

program = { SOI ~ stmt* ~ EOI }

stmt = { expr }

expr = {
    methodCall
    | lit
}

methodCall = { IDENT ~ "(" ~ expr? ~ ")" }

lit = { stringLit | charLit | numLit }

stringLit = ${ "\"" ~ stringLitChar* ~ "\"" }
charLit = ${ "\'" ~ stringLitChar ~ "\'" }
stringLitChar = {
    stringLitCharNonEscape
    | stringLitCharSingleEscape
    | stringLitCharUnicodeEscape
    | stringLitCharControlEscape
    | stringLitCharMetaEscape
}
stringLitCharNonEscape = @{ !("\"" | "\\") ~ ANY }
stringLitCharSingleEscape = @{ "\\" ~ ("0" | "a" | "b" | "e" | "f" | "n" | "r" | "s" | "t" | "v" | "\'" | "\"" | "\\") }
stringLitCharUnicodeEscape = @{
    "\\" ~ (("u" | "x") ~ (ASCII_HEX_DIGIT ~ "_"*){1,6})
    | "\\" ~ (("u" | "x") ~ "{" ~ (ASCII_HEX_DIGIT ~ "_"*){1,6} ~ "}")
}
stringLitCharControlEscape = ${
    "\\" ~ ("c" | "C-") ~ !(stringLitCharControlEscape | stringLitCharMetaEscape) ~ stringLitChar
}
stringLitCharMetaEscape = ${
    "\\" ~ "M-" ~ &(("\\c" | "\\C-")? ~ !(stringLitCharControlEscape | stringLitCharMetaEscape)) ~ stringLitChar
    | "\\" ~ ("c" | "C-") ~ "\\M-" ~ !(stringLitCharControlEscape | stringLitCharMetaEscape) ~ stringLitChar
}

numLit = { hexIntLit | binIntLit | floatLit | intLit }
intLit = @{ ASCII_DIGIT ~ !("x" | "X" | "b" | "B") ~ (ASCII_DIGIT | "_")* }
binIntLit = @{ "0" ~ ("b" | "B") ~ "_"* ~ ("0" | "1") ~ ("0" | "1" | "_")* }
hexIntLit = @{ "0" ~ ("x" | "X") ~ "_"* ~ ASCII_HEX_DIGIT ~ (ASCII_HEX_DIGIT | "_")* }
floatLit = @{
    ^"infinity" | ^"inf" | ^"nan"
    | intLit? ~ "." ~ intLit ~ floatLitExp?
    | intLit ~ "." ~ floatLitExp?
    | intLit ~ floatLitExp
}
floatLitExp = @{ ("e" | "E") ~ ("+" | "-")? ~ "_"* ~ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }

// https://www.unicode.org/reports/tr31/#D1
IDENT      = { (XID_START | "_") ~ XID_CONTINUE* }

WHITESPACE = _{ PATTERN_WHITE_SPACE }
